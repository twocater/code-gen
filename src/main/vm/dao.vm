package ${package}.dao;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.sql.DataSource;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import org.slf4j.Logger;

import com.xunlei.game.codegen.database.datatype.DefaultValue;
import com.xunlei.game.codegen.database.BaseDao;
import com.xunlei.game.codegen.util.StringParse;

import ${package}.vo.${entry}Vo;

public class $dao extends BaseDao<${vo}> {
#set($fields = "")
#set($values = "")
#set($params = "")
#set($seperator = "")
#foreach($column in ${columns})  
#set($tmpFields = "${fields}$seperator$column.field" )
#set($fields = $tmpFields )
#set($tmpValues = "$values${seperator}?" )
#set($values = $tmpValues )
#set($tmpParams = "$params$seperator${object}.get$column.field.substring(0, 1).toUpperCase()$column.field.substring(1)()" )
#set($params = $tmpParams)
#set($seperator = ",")
#end 
 	
 	public static final String TABLE = "$table";
	public static final String FIELD = "$fields";
	public static final String insertSql = "insert into " + TABLE + " (" + FIELD + ") values ($values)";	
	public static final String querySqlWithId = "select " + FIELD + " from " + TABLE + " where id=?";
	public static final String querySql = "select " + FIELD + " from " + TABLE;
	public static final String deleteSqlWithId = "delete from " + TABLE + " where id=?";
	public static final String deleteSql = "delete from " + TABLE;
	public static final String countSql = "select count(1) from " + TABLE;
	public static final String BLANK = " ";
	public static final String WHERE = " where ";
	public static final String AND = " and ";
	public static final String LIMIT = " limit ";
	public static final String UPDATE = " update ";
	public static final String SET = " set ";
	public static final String EMPTY_STRING = "";
	public static final String COMMA = ",";
	
	public ${dao}(DataSource dataSource,Logger log){
 		super(dataSource, log);
 	}
	
	public int save($vo $object) throws SQLException {
		return save(insertSql, $object);
	}
	
	public int[] saveList(List<$vo> ${object}List) throws SQLException{
		return saveList(insertSql, ${object}List);
	}

	public int delete(String id) throws SQLException {
		return update(deleteSqlWithId, new String[] { id });
	}
	
	public int[] deleteList(String[] ids) throws SQLException {
		return batchUpdate(deleteSqlWithId, ids);
	}
	
	public int delete(Map<String, String> condition) throws SQLException {
		StringBuilder sql = new StringBuilder(deleteSql);
		List<String> paramList = new ArrayList<String>();
		String split = WHERE;
		
#foreach($column in ${columns})
		if (condition.get("$column.field") != null) {
#if($column.type == "String")
			sql.append(split);
			sql.append("$column.field=?");
			paramList.add(condition.get("$column.field"));
#else
			sql.append(split);
			sql.append("$column.field=").append(StringParse.parse$column.type.substring(0, 1).toUpperCase()$column.type.substring(1)(condition.get("$column.field")));
#end
			split = AND;
		}
#end

		return update(sql.toString(), paramList.toArray(new String[0]));
	}
	
	public int update(Map<String, String> fields, Map<String, String> condition) throws SQLException {
		return update(TABLE, fields, condition);
	}
	
	public int update(String table, Map<String, String> fields, Map<String, String> condition) throws SQLException {
		StringBuilder sql = new StringBuilder();
		if (table == null) {
			table = TABLE;
		}
		sql.append(UPDATE).append(table).append(SET);
		List<String> paramList = new ArrayList<String>();
		String seperator = EMPTY_STRING;

#foreach($column in ${columns})
		if (fields.get("$column.field") != null) {
#if($column.type == "String")
			sql.append(seperator);
			sql.append("$column.field=?");
			paramList.add(fields.get("$column.field"));
#else
			sql.append(seperator);
			sql.append("$column.field=").append(StringParse.parse$column.type.substring(0, 1).toUpperCase()$column.type.substring(1)(fields.get("$column.field")));
#end
			seperator = COMMA;
		}
#end

		String split = WHERE;
#set($i = 0)
#foreach($column in ${columns})
		if (condition.get("$column.field") != null) {
#if($column.type == "String")
			sql.append(split);
			sql.append("$column.field").append("=?");
			paramList.add(condition.get("$column.field"));
#else
			sql.append(split);
			sql.append("$column.field=").append(StringParse.parse$column.type.substring(0, 1).toUpperCase()$column.type.substring(1)(condition.get("$column.field")));
#end
		}
#set($i = $i + 1)
#if($i == 1)
		split = AND;
#end
#end

		return update(sql.toString(), paramList.toArray(new String[0]));
	}	
	
	public int[] updateList(String sql, List<$vo> list) throws SQLException {
		String[] ids = new String[list.size()];
		for (int i = 0; i < ids.length; i++) {
			ids[i] = list.get(i).getId();
		}

		return batchUpdate(sql, ids);
	}
	
	public int update$vo(String table, $vo $object) throws SQLException{
		StringBuilder sql = new StringBuilder();
		if (table == null) {
			table = TABLE;
		}
		sql.append(" update ").append(table).append(" set ") ;
		List<Object> paramList = new ArrayList<Object>();
		String seperator = "";
#foreach($column in ${columns})   
#set($getter = "${object}.get$column.field.substring(0, 1).toUpperCase()$column.field.substring(1)()")
#if ($column.type == "String") 
#if($column.field != "id")

		sql.append(seperator);
		sql.append("$column.field=?");
		paramList.add($getter);
		seperator = ",";
#end
#else 

		sql.append(seperator);
		sql.append("$column.field=?");
		paramList.add($getter);
		seperator = ",";			
#end
#end 

		sql.append(" where id=?");
		paramList.add(${object}.getId());
		return update(sql.toString(),paramList.toArray());
	}
	
	public $vo query(String id) throws SQLException {
		return query(querySqlWithId, new String[] { id });
	}
	
	public $vo query(Map<String, String> condition) throws SQLException {
		StringBuilder sql = new StringBuilder(querySql);
		List<String> paramList = new ArrayList<String>();
		String split = WHERE;
		
#foreach($column in ${columns})
		if (condition.get("$column.field") != null) {
#if($column.type == "String")
			sql.append(split);
			sql.append("$column.field=?");
			paramList.add(condition.get("$column.field"));
#else
			sql.append(split);
			sql.append("$column.field=").append(StringParse.parse$column.type.substring(0, 1).toUpperCase()$column.type.substring(1)(condition.get("$column.field")));
#end
			split = AND;
		}
#end

		return query(sql.toString(), paramList.toArray(new String[0]));
	}

	public List<$vo> queryList(Map<String, String> condition, boolean isPage, int page, int perPage) throws SQLException {
		StringBuilder sql = new StringBuilder(querySql);
		List<String> paramList = new ArrayList<String>();
		String split = WHERE;
		
#foreach($column in ${columns})
		if (condition.get("$column.field") != null) {
#if($column.type == "String")
			sql.append(split);
			sql.append("$column.field=?");
			paramList.add(condition.get("$column.field"));
#else
			sql.append(split);
			sql.append("$column.field=").append(StringParse.parse$column.type.substring(0, 1).toUpperCase()$column.type.substring(1)(condition.get("$column.field")));
#end
			split = AND;
		}
#end
			
		if (isPage) {
			int start = (page - 1) * perPage;
			sql.append(LIMIT).append(start).append(",").append(perPage);
		}

		return queryList(sql.toString(), paramList.toArray(new String[0]));
	}

	public List<$vo> queryList(boolean isPage, int page, int perPage) throws SQLException {
		StringBuilder sb = new StringBuilder(querySql);
		
		if (isPage) {
			int start = (page - 1) * perPage;
			sb.append(LIMIT).append(start).append(",").append(perPage);
		}
		return queryList(sb.toString(), null);
	}
	
	public int count() throws SQLException {
		return queryForInt(countSql);
	}
	
	@Override
	protected void setRow(PreparedStatement ps, ${vo} object) throws SQLException {
#set($i = 1)
#foreach($column in ${columns})
#set($columnfield="$column.field.substring(0, 1).toUpperCase()$column.field.substring(1)")
		ps.set$column.type.substring(0, 1).toUpperCase()$column.type.substring(1)($i, object.get$columnfield());
#set($i=$i+1)
#end
	}
	
	@Override
	protected ${vo} mapRow(ResultSet rs) throws SQLException {
		${vo} ${object} = new ${vo}();
#set($i = 1)
#foreach($column in ${columns})
#set($columnfield="$column.field.substring(0, 1).toUpperCase()$column.field.substring(1)")
		${object}.set${columnfield}(rs.get$column.type.substring(0, 1).toUpperCase()$column.type.substring(1)($i));
#set($i=$i+1)
#end
		return ${object};
	}
}
