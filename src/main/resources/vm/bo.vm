package ${package}.server;

import java.sql.SQLException;

import com.twocater.daocodegen.codegen.dao.util.C3P0DataSourceUtil;
import com.twocater.daocodegen.codegen.dao.util.UuidGen;

import org.slf4j.LoggerFactory;

#foreach($mapping in $mappingMap.entrySet())
import ${package}.vo.${mapping.key}Vo;
#end

public class ServerBo {
	private static ServerBo instance = new ServerBo();
	private DaoFactory daoFactory;

	private UuidGen uuidGen = new UuidGen();

	private ServerBo() {
		daoFactory = new DaoFactory(C3P0DataSourceUtil.createDataSource("db.properties"), LoggerFactory.getLogger("db"));
	}

	public static ServerBo getInstance() {
		return instance;
	}

	public String createId() {
		return uuidGen.createId();
	}

	public DaoFactory getDaoFactory() {
		return daoFactory;
	}

#foreach($mapping in $mappingMap.entrySet())
#set($key = "${mapping.key}")
#set($first = "$key.substring(0,1).toLowerCase()")
#set($other = "$key.substring(1)")
#set($object = "$first$other")
#set($idType = "String")
    #foreach($column in $mapping.value)
        #if($column.type == "long")
            #set($idType = "long")
        #end
    #end

	public ${idType} add${mapping.key}(${mapping.key}Vo ${object}Vo) throws SQLException{
        ${idType} id = ${object}Vo.getId();
		daoFactory.get${mapping.key}Dao().save(${object}Vo);
		return id;
	}

	public int delete${mapping.key}(${idType} id) throws SQLException {
		daoFactory.get${mapping.key}Dao().delete(id);
		return 1;
	}

	public int delete${mapping.key}(${idType}[] ids) throws SQLException {
		daoFactory.get${mapping.key}Dao().deleteList(ids);
		return 1;
	}

	public int total${mapping.key}() throws SQLException {
		int total = daoFactory.get${mapping.key}Dao().count();
		return total;
	}

	public ${mapping.key}Vo view${mapping.key}(${idType} id) throws SQLException {
		${mapping.key}Vo vo = daoFactory.get${mapping.key}Dao().query(id);
		return vo;
	}
#end

}