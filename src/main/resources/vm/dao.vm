package ${package}.dao;

import java.util.List;

import java.sql.Connection;
import javax.sql.DataSource;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import org.slf4j.Logger;

import com.twocater.daocodegen.codegen.dao.BaseDao;

import ${package}.vo.${entry}Vo;

public class $dao extends BaseDao<${vo}> {
#set($updateFields = "")
#set($insertFields = "")
#set($fields = "")
#set($values = "")
#set($params = "")
#set($seperator = "")
#foreach($column in ${columns})
#set($fields = "${fields}$seperator$column.field" )
#set($params = "$params$seperator${object}.get$column.field.substring(0, 1).toUpperCase()$column.field.substring(1)()")
#set($updateFields = "$updateFields$seperator$column.field=?")
#set($seperator = ",")
#end
#set($seperator = "")
#foreach($column in ${columns})
#if(!$autoIncrementColumns.contains($column.field))
#set($insertFields = "${insertFields}$seperator$column.field" )
#set($values = "$values${seperator}?" )
#set($seperator = ",")
#end
#end
#set($idType = "String")
#foreach($column in ${columns})
    #if($column.type == "long")
        #set($idType = "long")
    #end
#end

 	public static final String TABLE = "$databaseName.$table";
	public static final String FIELD = "$fields";
	public static final String INSERT_FIELD = "$insertFields";
##	public static final String querySqlWithId = "select " + FIELD + " from " + TABLE + " where id=?";
##	public static final String querySql = "select " + FIELD + " from " + TABLE;
##	public static final String deleteSqlWithId = "delete from " + TABLE + " where id=?";
##	public static final String deleteSql = "delete from " + TABLE;
	public static final String BLANK = " ";
	public static final String WHERE = " where ";
	public static final String AND = " and ";
	public static final String LIMIT = " limit ";
	public static final String UPDATE = " update ";
	public static final String SET = " set ";
	public static final String EMPTY_STRING = "";
	public static final String COMMA = ",";

	public static final String insertSql = "insert into " + TABLE + " (" + INSERT_FIELD + ") values ($values)";
	public static final String countSql = "select count(1) from " + TABLE;
#foreach($entry in $uniqueIndexList.entrySet())
#set($paramList = "")
#set($sep = "")
#foreach($p in ${entry.value})
#set($paramList = "$paramList$sep$p=?")
#set($sep = " and ")
#end
	public static final String querySqlBy${entry.key} = "select " + FIELD + " from " + TABLE + " where ${paramList}";
	public static final String deleteSqlBy${entry.key} = "delete from " + TABLE + " where ${paramList}";
	public static final String updateSqlBy${entry.key} = "update " + TABLE + " set $updateFields" + " where ${paramList}";
#end

	public ${dao}(DataSource dataSource,Logger log){
 		super(dataSource, log);
 	}

	public int save($vo $object) throws SQLException {
		return save(insertSql, $object);
	}

	public int[] saveList(List<$vo> ${object}List) throws SQLException{
		return saveList(insertSql, ${object}List);
	}

#foreach($entry in $uniqueIndexList.entrySet())
#set($paramList = "")
#set($params = "")
#set($sep = "")
#foreach($p in ${entry.value})
#set($paramList = "$paramList$sep$columnType.get($p) $p")
#set($params = "$params$sep$p")
#set($sep = ",")
#end

	public int deleteBy${entry.key}($paramList) throws SQLException {
		return update(deleteSqlBy${entry.key}, new Object[]{$params});
	}
#end

#set($fieldsGet = "")
#set($sep = "")
#foreach($column in ${columns})
	#set($columnfield="$column.field.substring(0, 1).toUpperCase()$column.field.substring(1)")
	#set($fieldsGet = "$fieldsGet${sep}vo.get$columnfield()")
	#set($sep = ",")
#end
#foreach($entry in $uniqueIndexList.entrySet())
#set($paramList = "")
#set($params = "")
#set($sep = "")
#set($bysGet = "")
#foreach($p in ${entry.value})
#set($paramList = "$paramList$sep$columnType.get($p) $p")
#set($params = "$params$sep$p")
#set($bysGet = "${bysGet}${sep}vo.get$p.substring(0, 1).toUpperCase()$p.substring(1)()")
#set($sep = ",")
#end

	public int updateBy${entry.key}($vo vo) throws SQLException{
		return update(updateSqlBy${entry.key}, new Object[]{$fieldsGet,$bysGet});
	}
#end

#foreach($entry in $uniqueIndexList.entrySet())

	public int[] batchUpdateBy${entry.key}(List<$vo> list) throws SQLException {
    	Connection conn = null;
    	PreparedStatement ps = null;
    	int[] result = null;
    	try {
    		conn = getConnection();
    		ps = conn.prepareStatement(updateSqlBy${entry.key});
    		for ($vo vo : list) {
				setAllRow(ps, vo);
#set($i = $columns.size()+1)
#foreach($p in ${entry.value})
            	ps.set$columnMap.get($p).type.substring(0, 1).toUpperCase()$columnMap.get($p).type.substring(1)($i, vo.get$p.substring(0,1).toUpperCase()$p.substring(1)());
#set($i = $i+1)
#end
    			ps.addBatch();
    		}
    		result = ps.executeBatch();
    		log.debug("batch exe sql:{}", new String[]{updateSqlBy${entry.key}});
		} catch (SQLException e) {
			log.error("batch exe sql:{} exception.{}", new String[]{updateSqlBy${entry.key}, e.getMessage()});
    		throw e;
    	} finally {
    		closeConnection(ps, conn);
    	}
    	return result;
	}
#end

#foreach($entry in $uniqueIndexList.entrySet())

	public int[] batchDeleteBy${entry.key}(List<$vo> list) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;
		int[] result = null;
		try {
			conn = getConnection();
			ps = conn.prepareStatement(deleteSqlBy${entry.key});
			for ($vo vo : list) {
#set($i = 1)
#foreach($p in ${entry.value})
    			ps.set$columnMap.get($p).type.substring(0, 1).toUpperCase()$columnMap.get($p).type.substring(1)($i, vo.get$p.substring(0,1).toUpperCase()$p.substring(1)());
#set($i = $i+1)
#end
				ps.addBatch();
			}
			result = ps.executeBatch();
			log.debug("batch exe sql:{}", new String[]{deleteSqlBy${entry.key}});
		} catch (SQLException e) {
			log.error("batch exe sql:{} exception.{}", new String[]{deleteSqlBy${entry.key}, e.getMessage()});
			throw e;
		} finally {
			closeConnection(ps, conn);
		}
		return result;
	}
#end

#foreach($entry in $uniqueIndexList.entrySet())

	public int deleteBy${entry.key}New($vo vo) throws SQLException {
		Connection con = null;
		PreparedStatement ps = null;
		int result = 0;
		try {
			con = getConnection();
			ps = con.prepareStatement(deleteSqlBy${entry.key});
#set($i = 1)
#foreach($p in ${entry.value})
    		ps.set$columnMap.get($p).type.substring(0, 1).toUpperCase()$columnMap.get($p).type.substring(1)($i, vo.get$p.substring(0,1).toUpperCase()$p.substring(1)());
#set($i = $i+1)
#end
			result = ps.executeUpdate();
			log.debug("exe sql:{},param:{}", new String[]{deleteSqlBy${entry.key}, vo.toString()});
		} catch (SQLException e) {
			log.error("exe sql:{},param:{} exception.{}", new String[]{deleteSqlBy${entry.key}, vo.toString(), e.getMessage()});
			throw e;
		} finally {
			closeConnection(null, ps, con);
		}
		return result;
	}
#end

#foreach($entry in $uniqueIndexList.entrySet())

	public int updateBy${entry.key}New($vo vo) throws SQLException {
		Connection con = null;
		PreparedStatement ps = null;
		int result = 0;
		try {
			con = getConnection();
			ps = con.prepareStatement(updateSqlBy${entry.key});
			setAllRow(ps, vo);
#set($i = $columns.size()+1)
#foreach($p in ${entry.value})
			ps.set$columnMap.get($p).type.substring(0, 1).toUpperCase()$columnMap.get($p).type.substring(1)($i, vo.get$p.substring(0,1).toUpperCase()$p.substring(1)());
#set($i = $i+1)
#end
			result = ps.executeUpdate();
			log.debug("exe sql:{},param:{}", new String[]{updateSqlBy${entry.key}, vo.toString()});
		} catch (SQLException e) {
			log.error("exe sql:{},param:{} exception.{}", new String[]{updateSqlBy${entry.key}, vo.toString(), e.getMessage()});
			throw e;
		} finally {
			closeConnection(null, ps, con);
		}
		return result;
	}
#end

#foreach($entry in $uniqueIndexList.entrySet())
#set($paramList = "")
#set($params = "")
#set($sep = "")
#foreach($p in ${entry.value})
#set($paramList = "$paramList$sep$columnType.get($p) $p")
#set($params = "$params$sep$p")
#set($sep = ",")
#end

	public $vo queryBy${entry.key}($paramList) throws SQLException {
		return query(querySqlBy${entry.key}, new Object[]{$params});
	}
#end

	public int count() throws SQLException {
		return queryForInt(countSql);
	}

	@Override
	protected void setRow(PreparedStatement ps, ${vo} object) throws SQLException {
#set($i = 1)
#foreach($column in ${columns})
#if(!$autoIncrementColumns.contains($column.field))
#set($columnfield="$column.field.substring(0, 1).toUpperCase()$column.field.substring(1)")
		ps.set$column.type.substring(0, 1).toUpperCase()$column.type.substring(1)($i, object.get$columnfield());
#set($i=$i+1)
#end
#end
}

	protected void setAllRow(PreparedStatement ps, ${vo} object) throws SQLException {
#set($i = 1)
#foreach($column in ${columns})
#set($columnfield="$column.field.substring(0, 1).toUpperCase()$column.field.substring(1)")
    	ps.set$column.type.substring(0, 1).toUpperCase()$column.type.substring(1)($i, object.get$columnfield());
#set($i=$i+1)
#end
}

	@Override
	protected ${vo} mapRow(ResultSet rs) throws SQLException {
		${vo} ${object} = new ${vo}();
#set($i = 1)
#foreach($column in ${columns})
#set($columnfield="$column.field.substring(0, 1).toUpperCase()$column.field.substring(1)")
		${object}.set${columnfield}(rs.get$column.type.substring(0, 1).toUpperCase()$column.type.substring(1)($i));
#set($i=$i+1)
#end
		return ${object};
	}
##
##	public int delete(${idType} id) throws SQLException {
##		return update(deleteSqlWithId, new ${idType}[] { id });
##	}
##
##	public int[] deleteList(${idType}[] ids) throws SQLException {
##		return batchUpdate(deleteSqlWithId, ids);
##	}
##
##	public int delete(Map<String, String> condition) throws SQLException {
##		StringBuilder sql = new StringBuilder(deleteSql);
##		List<String> paramList = new ArrayList<String>();
##		String split = WHERE;
##
###foreach($column in ${columns})
##		if (condition.get("$column.field") != null) {
###if($column.type == "String")
##			sql.append(split);
##			sql.append("$column.field=?");
##			paramList.add(condition.get("$column.field"));
###else
##			sql.append(split);
##			sql.append("$column.field=").append(StringParse.parse$column.type.substring(0, 1).toUpperCase()$column.type.substring(1)(condition.get("$column.field")));
###end
##			split = AND;
##		}
###end
##
##		return update(sql.toString(), paramList.toArray(new String[0]));
##	}
##
##	public int update(Map<String, String> fields, Map<String, String> condition) throws SQLException {
##		return update(TABLE, fields, condition);
##	}
##
##	public int update(String table, Map<String, String> fields, Map<String, String> condition) throws SQLException {
##		StringBuilder sql = new StringBuilder();
##		if (table == null) {
##			table = TABLE;
##		}
##		sql.append(UPDATE).append(table).append(SET);
##		List<String> paramList = new ArrayList<String>();
##		String seperator = EMPTY_STRING;
##
###foreach($column in ${columns})
##		if (fields.get("$column.field") != null) {
###if($column.type == "String")
##			sql.append(seperator);
##			sql.append("$column.field=?");
##			paramList.add(fields.get("$column.field"));
###else
##			sql.append(seperator);
##			sql.append("$column.field=").append(StringParse.parse$column.type.substring(0, 1).toUpperCase()$column.type.substring(1)(fields.get("$column.field")));
###end
##			seperator = COMMA;
##		}
###end
##
##		String split = WHERE;
###set($i = 0)
###foreach($column in ${columns})
##		if (condition.get("$column.field") != null) {
###if($column.type == "String")
##			sql.append(split);
##			sql.append("$column.field").append("=?");
##			paramList.add(condition.get("$column.field"));
###else
##			sql.append(split);
##			sql.append("$column.field=").append(StringParse.parse$column.type.substring(0, 1).toUpperCase()$column.type.substring(1)(condition.get("$column.field")));
###end
##		}
###set($i = $i + 1)
###if($i == 1)
##		split = AND;
###end
###end
##
##		return update(sql.toString(), paramList.toArray(new String[0]));
##	}
##
##	public int[] updateList(String sql, List<$vo> list) throws SQLException {
##        ${idType}[] ids = new ${idType}[list.size()];
##		for (int i = 0; i < ids.length; i++) {
##			ids[i] = list.get(i).getId();
##		}
##
##		return batchUpdate(sql, ids);
##	}
##
##	public int update$vo(String table, $vo $object) throws SQLException{
##		StringBuilder sql = new StringBuilder();
##		if (table == null) {
##			table = TABLE;
##		}
##		sql.append(" update ").append(table).append(" set ") ;
##		List<Object> paramList = new ArrayList<Object>();
##		String seperator = "";
###foreach($column in ${columns})
###set($getter = "${object}.get$column.field.substring(0, 1).toUpperCase()$column.field.substring(1)()")
###if ($column.type == "String")
###if($column.field != "id")
##
##		sql.append(seperator);
##		sql.append("$column.field=?");
##		paramList.add($getter);
##		seperator = ",";
###end
###else
##
##		sql.append(seperator);
##		sql.append("$column.field=?");
##		paramList.add($getter);
##		seperator = ",";
###end
###end
##
##		sql.append(" where id=?");
##		paramList.add(${object}.getId());
##		return update(sql.toString(),paramList.toArray());
##	}
##
##	public $vo query(${idType} id) throws SQLException {
##		return query(querySqlWithId, new ${idType}[] { id });
##	}
##
##
##
##	public $vo query(Map<String, String> condition) throws SQLException {
##		StringBuilder sql = new StringBuilder(querySql);
##		List<String> paramList = new ArrayList<String>();
##		String split = WHERE;
##
###foreach($column in ${columns})
##		if (condition.get("$column.field") != null) {
###if($column.type == "String")
##			sql.append(split);
##			sql.append("$column.field=?");
##			paramList.add(condition.get("$column.field"));
###else
##			sql.append(split);
##			sql.append("$column.field=").append(StringParse.parse$column.type.substring(0, 1).toUpperCase()$column.type.substring(1)(condition.get("$column.field")));
###end
##			split = AND;
##		}
###end
##
##		return query(sql.toString(), paramList.toArray(new String[0]));
##	}
##
##	public List<$vo> queryList(Map<String, String> condition, boolean isPage, int page, int perPage) throws SQLException {
##		StringBuilder sql = new StringBuilder(querySql);
##		List<String> paramList = new ArrayList<String>();
##		String split = WHERE;
##
###foreach($column in ${columns})
##		if (condition.get("$column.field") != null) {
###if($column.type == "String")
##			sql.append(split);
##			sql.append("$column.field=?");
##			paramList.add(condition.get("$column.field"));
###else
##			sql.append(split);
##			sql.append("$column.field=").append(StringParse.parse$column.type.substring(0, 1).toUpperCase()$column.type.substring(1)(condition.get("$column.field")));
###end
##			split = AND;
##		}
###end
##
##		if (isPage) {
##			int start = (page - 1) * perPage;
##			sql.append(LIMIT).append(start).append(",").append(perPage);
##		}
##
##		return queryList(sql.toString(), paramList.toArray(new String[0]));
##	}
##
##	public List<$vo> queryList(boolean isPage, int page, int perPage) throws SQLException {
##		StringBuilder sb = new StringBuilder(querySql);
##
##		if (isPage) {
##			int start = (page - 1) * perPage;
##			sb.append(LIMIT).append(start).append(",").append(perPage);
##		}
##		return queryList(sb.toString(), null);
##	}
}
